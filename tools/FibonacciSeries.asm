//push argument 1
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push constant 0
@0
D=A
@0
D=D+A
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=D+M
@addr_1
M=D
@SP
M=M-1
A=M
D=M
@addr_1
A=M
M=D
//push constant 1
@1
D=A
@0
D=D+A
@SP
A=M
M=D
@SP
M=M+1
//pop that 1
@1
D=A
@THAT
D=D+M
@addr_2
M=D
@SP
M=M-1
A=M
D=M
@addr_2
A=M
M=D
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@0
D=D+A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
A=M
D=M-D
M=D
@SP
M=M+1
//pop argument 0
@0
D=A
@ARG
D=D+M
@addr_3
M=D
@SP
M=M-1
A=M
D=M
@addr_3
A=M
M=D
// C_LABEL MAIN_LOOP_START
(MAIN_LOOP_START)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF COMPUTE_ELEMENT
@SP
AM=M-1
@D=M
@COMPUTE_ELEMENT
D;JNE
//  C_GOTO END_PROGRAM
@END_PROGRAM
0;JMP
// C_LABEL COMPUTE_ELEMENT
(COMPUTE_ELEMENT)
//push that 0
@0
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push that 1
@1
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
A=M
D=D+M
M=D
@SP
M=M+1
//pop that 2
@2
D=A
@THAT
D=D+M
@addr_4
M=D
@SP
M=M-1
A=M
D=M
@addr_4
A=M
M=D
//push pointer 1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@0
D=D+A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
A=M
D=D+M
M=D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@0
D=D+A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
A=M
D=M-D
M=D
@SP
M=M+1
//pop argument 0
@0
D=A
@ARG
D=D+M
@addr_5
M=D
@SP
M=M-1
A=M
D=M
@addr_5
A=M
M=D
//  C_GOTO MAIN_LOOP_START
@MAIN_LOOP_START
0;JMP
// C_LABEL END_PROGRAM
(END_PROGRAM)
