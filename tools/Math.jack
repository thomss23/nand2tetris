// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int powersOfTwo;

    /** Initializes the library. */
    function void init() {

        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = powersOfTwo[14] + powersOfTwo[14];
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {

        if(x < 0) {
            return x * (-1);
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int bitPos;

        let sum = 0;
        let shiftedX = x;
        let bitPos = 0;

        while (bitPos < 16) {
            if (Math.bit(y, bitPos)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let bitPos = bitPos + 1;
        }

        return sum;
    }

    function bool bit(int number, int pos) {
        return (powersOfTwo[pos] & number);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;

        if(y = 0) {
        do Sys.error(3);
        }

        let result = Math.divideRec(Math.abs(x), Math.abs(y));

        if(x < 0) {
        let result = -result;
        }

        if(y < 0) {
        let result = -result;
        }

        return result;
    }

    function int divideRec(int x, int y) {
        var int q;

        if(y < 0) {
        return 0;
        }
        if(y > x) {
        return 0;
        }
        let q = Math.divideRec(x, y + y);
        if((x - ((q + q) * y)) < y) {
        return q + q;
        }
        else {
        return q + q + 1;
        }
    } 
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int left, right, mid, midSq, result;

        if(x < 0) {
        do Sys.error(4);
        }

        let left = 0;
        let right = Math.min(x, 181);
        let result = 0;

        while(left < (right + 1)) {

            let mid = (left + right) / 2;
            let midSq = mid * mid;

            if(midSq > x) {
                let right = mid - 1;
            }

            else {
                let left = mid + 1;
                let result = mid;
            }
            
        }

        return result;
  }

    /** Returns the greater number. */
    function int max(int a, int b) {

        if(a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        if(a < b) {
            return a;
        }
        
        return b;
    }
}
